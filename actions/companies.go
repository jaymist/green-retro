package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/jaymist/greenretro/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Company)
// DB Table: Plural (companies)
// Resource: Plural (Companies)
// Path: Plural (/companies)
// View Template Folder: Plural (/templates/companies/)

// CompaniesResource is the resource for the Company model
type CompaniesResource struct {
	buffalo.Resource
}

// List gets all Companies. This function is mapped to the path
// GET /companies
func (v CompaniesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	companies := &models.Companies{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Companies from the DB
	if err := q.All(companies); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.JSON(companies))
}

// Show gets the data for one Company. This function is mapped to
// the path GET /companies/{company_id}
func (v CompaniesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Company
	company := &models.Company{}

	// To find the Company the parameter company_id is used.
	if err := tx.Find(company, c.Param("company_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.JSON(company))
}

// Create adds a Company to the DB. This function is mapped to the
// path POST /companies
func (v CompaniesResource) Create(c buffalo.Context) error {
	// Allocate an empty Company
	company := &models.Company{}

	// Bind company to the html form elements
	if err := c.Bind(company); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(company)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.JSON(company))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "company.created.success"))
	// and redirect to the companies index page
	return c.Render(201, r.Auto(c, company))
}

// Update changes a Company in the DB. This function is mapped to
// the path PUT /companies/{company_id}
func (v CompaniesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Company
	company := &models.Company{}

	if err := tx.Find(company, c.Param("company_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Company to the html form elements
	if err := c.Bind(company); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(company)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, company))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "company.updated.success"))
	// and redirect to the companies index page
	return c.Render(200, r.JSON(company))
}

// Destroy deletes a Company from the DB. This function is mapped
// to the path DELETE /companies/{company_id}
func (v CompaniesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Company
	company := &models.Company{}

	// To find the Company the parameter company_id is used.
	if err := tx.Find(company, c.Param("company_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(company); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "company.destroyed.success"))
	// Redirect to the companies index page
	return c.Render(200, r.JSON(company))
}
